{
	"configuration": {
		"basePage": "https://www.cclerk.hctx.net/Applications/WebSearch/CourtSearch.aspx?CaseType=Civil"
	},
	"scripts": [
		{
			"name": "set-search-context",
			"json": [
				"/*",
				"set context script",
				"*/",
				"let set_context = {",
				"    'names': [",
				"        'Court',",
				"        'Case Status'",
				"    ],",
				"    'controls': [",
				"        'ctl00_ContentPlaceHolder1_ddlCourt',",
				"        'ctl00_ContentPlaceHolder1_DropDownListStatus'",
				"    ],",
				"    'control_values': [",
				"        'All',",
				"        'Open'",
				"    ],",
				"    'set_value': function (id) {",
				"        let ui_name = set_context.names[id];",
				"        let name = set_context.controls[id];",
				"        let opt_value = set_context.control_values[id];",
				"        let cbo = document.getElementById(name);",
				"        let options = Array.prototype.slice.call(cbo.getElementsByTagName('option'), 0);",
				"        let option_index = options.findIndex(x => x.getAttribute('value') == opt_value);",
				"        if (option_index < 0) {",
				"            let msg = ''.concat('Error: unable to set control ', ui_name, ' to ', opt_value);",
				"            throw msg;",
				"        }",
				"        cbo.selectedIndex = option_index;",
				"    },",
				"    'populate': function () {",
				"        let status = {",
				"            'name': 'Populate search context',",
				"            'result': true",
				"        }",
				"        try {",
				"            for (let i = 0; i < set_context.controls.length; i++) {",
				"                set_context.set_value(i);",
				"            }",
				"            return JSON.stringify(status);",
				"        } catch {",
				"            status.result = false;",
				"            return JSON.stringify(status);",
				"        }",
				"    }",
				"}",
				"return set_context.populate();"
			]
		},
		{
			"name": "set-search-date-parameters",
			"json": [
				"/*",
				"set parameters script",
				"*/",
				"let set_parameters = {",
				"    'names': [",
				"        'Starting Date',",
				"        'Ending Date'",
				"    ],",
				"    'controls': [",
				"        'ctl00_ContentPlaceHolder1_txtFrom',",
				"        'ctl00_ContentPlaceHolder1_txtTo'",
				"    ],",
				"    'control_values': [",
				"        '{0}',",
				"        '{1}'",
				"    ],",
				"    'set_value': function (id) {",
				"        let name = set_parameters.controls[id];",
				"        let opt_value = set_parameters.control_values[id];",
				"        let tbx = document.getElementById(name);",
				"        tbx.value = opt_value;",
				"    },",
				"    'populate': function () {",
				"        let status = {",
				"            'name': 'Populate search date range',",
				"            'result': true",
				"        }",
				"        try {",
				"            for (let i = 0; i < set_parameters.controls.length; i++) {",
				"                set_parameters.set_value(i);",
				"            }",
				"            return JSON.stringify(status);",
				"        } catch {",
				"            status.result = false;",
				"            return JSON.stringify(status);",
				"        }",
				"    }",
				"}",
				"return set_parameters.populate();"
			]
		},
		{
			"name": "fetch-search-record-count",
			"json": [
				"/*",
				"read status label to get record count",
				"*/",
				"let read_status_label = {",
				"    'controls': [",
				"        'ctl00_ContentPlaceHolder1_lblCount'",
				"    ],",
				"    'execute': function () {        ",
				"        let name = read_status_label.controls[0];",
				"        let spn = document.getElementById(name);",
				"        let status = {",
				"            'name': 'Read record count',",
				"            'rowCount': 0,",
				"            'result': true",
				"        }        ",
				"        try {",
				"            let txt = spn.innerText.trim();",
				"            let arr = txt.split(' ');",
				"            let itemCount = parseInt(arr[0]);",
				"            if (!isNaN(itemCount)) { status.rowCount = itemCount; }",
				"            return JSON.stringify(status);",
				"        } catch {",
				"            status.result = false;",
				"            return JSON.stringify(status);",
				"        }",
				"    }",
				"}",
				"return read_status_label.execute();"
			]
		},
		{
			"name": "fetch-search-case-style-details",
			"json": [
				"/*",
				"read case style",
				"*/",
				"let read_case_style = {",
				"    'read_row': function (lnk) {",
				"        if (null == lnk) return null;",
				"        try {",
				"            let row = lnk.closest('tr');",
				"            return {",
				"                'court': row.cells[2].innerText,",
				"                'fileDate': row.cells[3].innerText,",
				"                'status': row.cells[4].innerText,",
				"                'caseType': row.cells[5].innerText,",
				"                'caseStyle': row.cells[7].innerText,",
				"                'caseNumber': lnk.innerText",
				"            }",
				"        } catch {",
				"            return null;",
				"        }",
				"    },",
				"    'execute': function () {",
				"        let status = {",
				"            'name': 'Read case styles',",
				"            'data': [],",
				"            'result': true",
				"        }",
				"        try {",
				"            var links = Array.prototype.slice.call(document.getElementsByTagName('a'), 0)",
				"            links = links.filter(a => a.classList.contains('doclinks'));",
				"            links.forEach(lnk => {",
				"                let dta = read_case_style.read_row(lnk);",
				"                if (null != dta) { status.data.push(dta); }",
				"            });",
				"            return JSON.stringify(status);",
				"        } catch {",
				"            status.result = false;",
				"            return JSON.stringify(status);",
				"        }",
				"    }",
				"}",
				"return read_case_style.execute();"
			]
		},
		{
			"name": "fetch-search-address-details",
			"json": [
				"/*",
				"read case address",
				"*/",
				"let read_case_address = {",
				"    'decode_text': function (str) {",
				"        let element = document.createElement('div');",
				"        element.innerHTML = str;",
				"        return element.innerText.trim().replace('  ',' ');",
				"    },",
				"    'expand_row': function (rw) {",
				"        try {",
				"            rw.cells[8].getElementsByTagName('a')[0].click();",
				"            return true;",
				"        } catch {",
				"            return false;",
				"        }",
				"    },",
				"    'read_row': function (lnk) {",
				"        if (null == lnk) return null;",
				"        try {",
				"            let row = lnk.closest('tr');",
				"            let obj = {",
				"                'caseNumber': lnk.innerText,",
				"                'defendant': '',",
				"                'address': ''",
				"            }",
				"            let canExpand = read_case_address.expand_row(row);",
				"            if (!canExpand) { return obj; }",
				"            let rowId = row.rowIndex + 1;",
				"            let tbl = row.closest('table');",
				"            let target = tbl.rows[rowId];",
				"            let children = Array.prototype.slice.call(target.getElementsByTagName('table'), 0);",
				"            let data = children.find(x => x.id == 'gridView');",
				"            if (null == data) { return obj; }",
				"            let datarows = Array.prototype.slice.call(data.getElementsByTagName('tr'), 0)",
				"            let defendant_rows = datarows.filter(x => {",
				"                if (x.cells.length < 3) { return false; }",
				"                return (x.cells[1].innerText.trim().toLowerCase() == 'defendant');",
				"            });",
				"            if (defendant_rows.length == 0) { return obj; }",
				"            let defendant_row = defendant_rows[0];",
				"            if (defendant_rows.length > 1) {",
				"                defendant_row = defendant_rows.filter(x => x.cells[2].innerText.length > 0);",
				"                if (defendant_row == null) { defendant_row = defendant_rows[0]; }",
				"            }",
				"            if (null == defendant_row) { return obj; }",
				"            let arr_address = [];",
				"            let address_info = defendant_row.cells[2].innerHTML.split('<br>');",
				"            for (let a = 0; a < address_info.length; a++) {",
				"                let txt = read_case_address.decode_text(address_info[a]);",
				"                if (a == 0) { obj.defendant = txt }",
				"                else {",
				"                    arr_address.push(txt);",
				"                }",
				"            }",
				"            obj.address = arr_address.join('|');",
				"            return obj;",
				"        } catch {",
				"            return null;",
				"        }",
				"    },",
				"    'execute': function () {",
				"        let status = {",
				"            'name': 'Read case styles',",
				"            'data': [],",
				"            'result': true",
				"        }",
				"        try {",
				"            let links = Array.prototype.slice.call(document.getElementsByTagName('a'), 0)",
				"            links = links.filter(a => a.classList.contains('doclinks'));",
				"            links.forEach(lnk => {",
				"                let dta = read_case_address.read_row(lnk);",
				"                if (null != dta) { status.data.push(dta); }",
				"            });",
				"            return JSON.stringify(status);",
				"        } catch {",
				"            status.result = false;",
				"            return JSON.stringify(status);",
				"        }",
				"    }",
				"}",
				"return read_case_address.execute();"
			]
		},
		{
			"name": "navigate-next-page",
			"json": [
				"let execution_mode = '{0}';",
				"let pager_status = {",
				" 'name': 'Get paging detail',",
				" 'result': true,",
				" 'hasNextPage': false",
				"}",
				"try {",
				"    var place_holder_name = 'ctl00_ContentPlaceHolder1_DataPagerLisViewCases1'",
				"    var place_holder = document.getElementById(place_holder_name);",
				"    var links = Array.prototype.slice.call( place_holder.getElementsByTagName('a'), 0 );",
				"    var next_pg = links.find(x => x.innerText.trim().toLowerCase() == 'next' && x.getAttribute('disabled') == null);",
				"    pager_status.hasNextPage = next_pg != null;",
				"    if (execution_mode != 'execute') { return JSON.stringify(pager_status); }",
				"    next_pg.click();",
				"} catch {",
				"    pager_status.result = false;",
				"    return JSON.stringify(pager_status);",
				"}"
			]
		},
		{
			"name": "post-form-values",
			"json": [
				"/*",
				"send form values and post form",
				"*/",
				"let send_form = {",
				"    'controls': [",
				"        'ctl00_ContentPlaceHolder1_btnSearchCase'",
				"    ],",
				"    'set_value': function (id) {",
				"        let name = send_form.controls[id];",
				"        let button = document.getElementById(name);",
				"        button.click()",
				"    },",
				"    'populate': function () {",
				"        let status = {",
				"            'name': 'Submit form values',",
				"            'result': true",
				"        }",
				"        try {",
				"            for (let i = 0; i < send_form.controls.length; i++) {",
				"                send_form.set_value(i);",
				"            }",
				"            return JSON.stringify(status);",
				"        } catch {",
				"            status.result = false;",
				"            return JSON.stringify(status);",
				"        }",
				"    }",
				"}",
				"send_form.populate();"
			]
		}
	]
}