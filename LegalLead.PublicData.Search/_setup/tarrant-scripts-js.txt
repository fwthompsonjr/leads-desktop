{
	"configuration": {
		"basePage": "https://odyssey.tarrantcounty.com/PublicAccess/default.aspx",
		"locations": [
			"All Probate Courts",
			"All JP Courts",
			"All CCL Courts",
			"JP No. 1",
			"JP No. 2",
			"JP No. 3",
			"JP No. 4",
			"JP No. 5",
			"JP No. 6",
			"JP No. 7",
			"JP No. 8"
		],
		"links": [
			"Case Records Search",
			"Class C Misdemeanors Only"
		]
	},
	"scripts": [
		{
			"name": "is-human-page",
			"json": [
				"let human_check_found = false;",
				"if (null != document.getElementById('captcha-container')) { human_check_found = true; }",
				"if (!human_check_found) {",
				"    let body = document.getElementsByTagName('body')[0];",
				"    let txt = body.innerText;",
				"    human_check_found = txt.indexOf('confirm you are human') > 0;",
				"}",
				"var rsp = {",
				"    hasCaptcha = human_check_found",
				"}",
				"return JSON.stringify(rsp);"
			]
		},
		{
			"name": "civil-case-reader",
			"json": [
				"/*",
				"Uri",
				"CaseNumber",
				"CaseStyle",
				"DateFiled",
				"Court",
				"CaseType",
				"*/",
				"let civil_case_reader = {",
				"    get_rows: function () {",
				"        let headers = Array.prototype.slice.call(document.getElementsByTagName('th'), 0);",
				"        let firstheader = headers.find(h => h.getAttribute('class') == 'ssSearchResultHeader' && h.innerText.trim() == 'Case Number');",
				"        if (null == firstheader) return null;",
				"        let headingrow = firstheader.parentElement;",
				"        while (null != headingrow && headingrow.tagName != 'TBODY') { headingrow = headingrow.parentElement; }",
				"        if (headingrow == null) return null;",
				"        let rows = Array.prototype.slice.call(headingrow.getElementsByTagName('tr'), 0);",
				"        rows = rows.filter(rw => { let cells = Array.prototype.slice.call(rw.getElementsByTagName('td'), 0); return cells.length > 4; });",
				"        return rows;",
				"    },",
				"    get_uri: function (cell) {",
				"        let links = cell.getElementsByTagName('a');",
				"        if (null == links || links.length == 0) return '';",
				"        let lnk = links[0].getAttribute('href').toString();",
				"        let origin = document.location.origin;",
				"        if (lnk.indexOf(origin) >= 0) return lnk;",
				"        let pg = document.location.href;",
				"        let qry = document.location.search;",
				"        if (qry.length > 0) {",
				"            pg = pg.substring(0, pg.length - qry.length);",
				"        }",
				"        let landing = document.location.pathname",
				"        if (landing.length > 0) {",
				"            let items = landing.split('/');",
				"            let lastitem = items[items.length - 1];",
				"            pg = pg.substring(0, pg.length - lastitem.length);",
				"        }",
				"        lnk = ''.concat(pg, lnk);",
				"        return lnk;",
				"    },",
				"    get_data: function (rw) {",
				"        try {",
				"            let cells = Array.prototype.slice.call(rw.getElementsByTagName('td'), 0);",
				"            let caseNo = String(cells[0].innerText);",
				"            let caseStyle = String(cells[2].innerText);",
				"            let dateFiled = String(cells[3].firstChild.innerText)",
				"            let court = String(cells[3].lastChild.innerText);",
				"            let caseType = String(cells[4].firstChild.innerText);",
				"            let uri = String(justice_case_reader.get_uri(cells[0]));",
				"            return {",
				"                'uri': uri,",
				"                'caseNumber': caseNo,",
				"                'caseStyle': caseStyle,",
				"                'caseType': caseType,",
				"                'court': court,",
				"                'dateFiled': dateFiled",
				"            }",
				"        } catch {",
				"            return null;",
				"        }",
				"    },",
				"    get_cases: function () {",
				"        let cases = [];",
				"        let rws = justice_case_reader.get_rows();",
				"        if (null == rws) return cases;",
				"        rws.forEach(rw => {",
				"            let dt = justice_case_reader.get_data(rw);",
				"            if (null != dt) cases.push(dt);",
				"        })",
				"        return cases;",
				"    }",
				"}",
				"let data = justice_case_reader.get_cases();",
				"return JSON.stringify(data);"
			]
		},
		{
			"name": "criminal-case-reader",
			"json": [
				"/*",
				"Uri",
				"CaseNumber",
				"CaseStyle",
				"DateFiled",
				"Court",
				"CaseType",
				"*/",
				"let criminal_case_reader = {",
				"    get_rows: function () {",
				"        let headers = Array.prototype.slice.call(document.getElementsByTagName('th'), 0);",
				"        let firstheader = headers.find(h => h.getAttribute('class') == 'ssSearchResultHeader' && h.innerText.trim() == 'Case Number');",
				"        if (null == firstheader) return null;",
				"        let headingrow = firstheader.parentElement;",
				"        while (null != headingrow && headingrow.tagName != 'TBODY') { headingrow = headingrow.parentElement; }",
				"        if (headingrow == null) return null;",
				"        let rows = Array.prototype.slice.call(headingrow.getElementsByTagName('tr'), 0);",
				"        rows = rows.filter(rw => { let cells = Array.prototype.slice.call(rw.getElementsByTagName('td'), 0); return cells.length > 4; });",
				"        return rows;",
				"    },",
				"    get_uri: function (cell) {",
				"        let links = cell.getElementsByTagName('a');",
				"        if (null == links || links.length == 0) return '';",
				"        let lnk = links[0].getAttribute('href').toString();",
				"        let origin = document.location.origin;",
				"        if (lnk.indexOf(origin) >= 0) return lnk;",
				"        let pg = document.location.href;",
				"        let qry = document.location.search;",
				"        if (qry.length > 0) {",
				"            pg = pg.substring(0, pg.length - qry.length);",
				"        }",
				"        let landing = document.location.pathname",
				"        if (landing.length > 0) {",
				"            let items = landing.split('/');",
				"            let lastitem = items[items.length - 1];",
				"            pg = pg.substring(0, pg.length - lastitem.length);",
				"        }",
				"        lnk = ''.concat(pg, lnk);",
				"        return lnk;",
				"    },",
				"    get_data: function (rw) {",
				"        try {",
				"            let cells = Array.prototype.slice.call(rw.getElementsByTagName('td'), 0);",
				"            let caseNo = String(cells[0].innerText);",
				"            let citationNbr = String(cells[1].innerText);",
				"            let chargeType = String(cells[5].innerText);",
				"            let caseStyle = String(cells[2].innerText);",
				"            let dateFiled = String(cells[3].firstChild.innerText)",
				"            let court = String(cells[3].lastChild.innerText);",
				"            let caseType = String(cells[4].firstChild.innerText);",
				"            let uri = String(criminal_case_reader.get_uri(cells[0]));",
				"            return {",
				"                'uri': uri,",
				"                'caseNumber': caseNo,",
				"                'caseStyle': caseStyle,",
				"                'caseType': caseType,",
				"                'court': court,",
				"                'dateFiled': dateFiled,",
				"                'charges': chargeType,",
				"                'citationNumber': citationNbr",
				"            }",
				"        } catch {",
				"            return null;",
				"        }",
				"    },",
				"    get_cases: function () {",
				"        let cases = [];",
				"        let rws = criminal_case_reader.get_rows();",
				"        if (null == rws) return cases;",
				"        rws.forEach(rw => {",
				"            let dt = criminal_case_reader.get_data(rw);",
				"            if (null != dt) { cases.push(dt); }",
				"        })",
				"        return cases;",
				"    }",
				"}",
				"let data = criminal_case_reader.get_cases();",
				"return JSON.stringify(data);"
			]
		},
		{
			"name": "set-search-context",
			"json": [
				"let populate_search_context = {",
				"    'search_type': '0',",
				"    'location_name': 'All JP Courts',",
				"    'linkitems': function () {",
				"        const cs_search = 'Case Records Search'",
				"        const ms_search = 'Class C Misdemeanors Only';",
				"        return [",
				"            cs_search.toLowerCase(),",
				"            ms_search.toLowerCase()",
				"        ]",
				"    },",
				"    'get_hyperlinks': function () {",
				"        let linkitems = populate_search_context.linkitems();",
				"        let links = Array.prototype.slice.call(document.getElementsByTagName('a'), 0);",
				"        links = links.filter(n => { return n.classList.contains('ssSearchHyperlink') });",
				"        links = links.filter(n => {",
				"            let txt = String(n.innerText).trim().toLowerCase();",
				"            return (txt == linkitems[0] || txt == linkitems[1]);",
				"        });",
				"        links = links.filter(n => {",
				"            let txt = String(n.innerText).trim().toLowerCase();",
				"            return (txt == linkitems[0] || txt == linkitems[1]);",
				"        });",
				"        return links;",
				"    },",
				"    'set_location': function () {",
				"        const change_event = new Event('change', { bubbles: true }); ",
				"        let location_name = populate_search_context.location_name.trim().toLowerCase();",
				"        let cbo = document.getElementById('sbxControlID2');",
				"        let opts = Array.prototype.slice.call(cbo.getElementsByTagName('option'), 0);",
				"        let optId = opts.findIndex(x => x.innerText.trim().toLowerCase() == location_name);",
				"        cbo.selectedIndex = optId == -1 ? 1 : optId;",
				"        cbo.dispatchEvent(change_event);",
				"    },",
				"    'can_navigate': function () {",
				"        let search_type = populate_search_context.search_type;",
				"        if (search_type != '0' && search_type != '1') return false;",
				"        let links = populate_search_context.get_hyperlinks();",
				"        return links.length > 0;",
				"    },",
				"    navigate: function () {",
				"        let canNavigate = populate_search_context.can_navigate();",
				"        if (!canNavigate) {",
				"            throw new Error('Error invalid parameter defintion.');",
				"        }",
				"        let searchId = parseInt(populate_search_context.search_type);",
				"        let linkitems = populate_search_context.linkitems();",
				"        let links = populate_search_context.get_hyperlinks();",
				"        let lnk = links.find(x => x.innerText.trim().toLowerCase() == linkitems[searchId]);",
				"        populate_search_context.set_location();",
				"        lnk.click();",
				"    }",
				"}",
				"let parm_search_type = '{0}'; // default to case records search",
				"let parm_location_name = '{1}'",
				"populate_search_context.search_type = parm_search_type;",
				"populate_search_context.location_name = parm_location_name;",
				"populate_search_context.navigate();"
			]
		},
		{
			"name": "set-search-date-parameters",
			"json": [
				"let date0 = '{0}';",
				"let date1 = '{1}';",
				"let tboxes = [",
				"    document.getElementById('DateFiledOnAfter'),",
				"    document.getElementById('DateFiledOnBefore')",
				"]",
				"// Create a new 'change' event, set bubbles to true if you want the event to propagate up the DOM tree",
				"const change_event = new Event('change', { bubbles: true });",
				"const click_event = new Event('click', { bubbles: true });",
				"const date_filed = 'Date Filed'",
				"let cbo = document.getElementById('SearchBy');",
				"let opts = Array.prototype.slice.call(cbo.getElementsByTagName('option'), 0);",
				"let radio_buttons = Array.prototype.slice.call(document.getElementsByTagName('input'), 0);",
				"radio_buttons = radio_buttons.filter(x => x.getAttribute('name') == 'CaseStatusType')",
				"let open_option = radio_buttons.find(x => x.id == 'OpenOption');",
				"let dateIndex = opts.findIndex(x => x.innerText == date_filed);",
				"open_option.setAttribute('checked', 'checked');",
				"cbo.selectedIndex = dateIndex;",
				"cbo.dispatchEvent(change_event);",
				"tboxes[0].value = date0",
				"tboxes[1].value = date1",
				"let bttn = document.getElementById('SearchSubmit');",
				"bttn.click();"
			]
		},
		{
			"name": "fetch-search-address-details",
			"json": [
				"let dvs = Array.prototype.slice.call(document.getElementsByTagName('div'), 0);",
				"dvs = dvs.filter(d => d.classList.contains('ssCaseDetailSectionTitle'));",
				"let party_info = dvs.find(x => x.innerText.trim() == 'Party Information')",
				"let party_table = party_info.closest('table');",
				"let table_rows = Array.prototype.slice.call(party_table.getElementsByTagName('tr'), 0);",
				"table_rows = table_rows.filter(x => {",
				"    let thdrs = Array.prototype.slice.call(x.getElementsByTagName('th'), 0)",
				"        .filter(h => h.classList.contains('ssTableHeader'));",
				"    if (thdrs.length == 0) return false;",
				"    return x.innerText.indexOf('Lead Attorneys') == -1;",
				"});",
				"function get_case_number() {",
				"    const caseNoPrefix = 'Case No.';",
				"    let dvs = Array.prototype.slice.call(document.getElementsByTagName('div'), 0);",
				"    dvs = dvs.filter(d => d.classList.contains('ssCaseDetailCaseNbr'));",
				"    return dvs[0].innerText.replace(caseNoPrefix, '').trim();",
				"}",
				"function get_case_style() {",
				"    tbls = Array.prototype.slice.call(document.getElementsByTagName('table'), 0)",
				"    tbls = tbls.filter(t => {",
				"        let dta = t.innerText;",
				"        if (dta.indexOf('Case Type:') < 0) { return false; }",
				"        if (dta.indexOf('Date Filed:') < 0) { return false; }",
				"        if (dta.indexOf('Location:') < 0) { return false; }",
				"        return true;",
				"    });",
				"    if (tbls.length == 0) return '';",
				"    let case_table = tbls[0];",
				"    if (case_table.rows.length == 0) return '';",
				"    let case_table_row = case_table.rows[0];",
				"    if (case_table_row.cells.length == 0) return '';",
				"    return case_table_row.cells[0].innerText;",
				"}",
				"function get_address(tr) {",
				"    const nbs = '&nbsp;';",
				"    const br = '<br>';",
				"    const ppe = '|';",
				"    const dbppe = '||';",
				"    try {",
				"        let parent_table = tr.closest('table');",
				"        let row_id = tr.rowIndex;",
				"        let addr_id = row_id + 1;",
				"        if (addr_id > parent_table.rows.length - 1) {",
				"            return '';",
				"        }",
				"        let html = String(parent_table.rows[addr_id].cells[0].innerHTML);",
				"        while (html.indexOf(nbs) >= 0) { html = html.replace(nbs, ' ').trim(); }",
				"        while (html.indexOf(br) >= 0) { html = html.replace(br, ppe).trim(); }",
				"        while (html.indexOf(dbppe) >= 0) { html = html.replace(dbppe, ppe).trim(); }",
				"        let arr = [];",
				"        let items = html.split(ppe);",
				"        for (let i = 0; i < items.length; i++) {",
				"            let current = String(items[i].trim());",
				"            if (current.length > 0) { arr.push(current); }",
				"        }",
				"        html = arr.join(ppe);",
				"        return html;",
				"    } catch {",
				"        return '';",
				"    }",
				"}",
				"let caseNumber = get_case_number();",
				"let caseStyle = get_case_style();",
				"let people = [];",
				"for (let a = 0; a < table_rows.length; a++) {",
				"    let tr = table_rows[a];",
				"    let person = {",
				"        'index': a,",
				"        'caseNumber': caseNumber,",
				"        'caseStyle': caseStyle,",
				"        'type': tr.cells[0].innerText.trim(),",
				"        'name': tr.cells[1].innerText.trim(),",
				"        'address': get_address(tr)",
				"    }",
				"    people.push(person);",
				"}",
				"return JSON.stringify(people);"
			]
		}
	]
}