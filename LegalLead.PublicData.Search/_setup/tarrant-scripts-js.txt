"configuration":{
  "basePage": "https://odyssey.tarrantcounty.com/PublicAccess/default.aspx",
  "locations": [
	"All Probate Courts",
	"All JP Courts",
	"All CCL Courts",
	"JP No. 1",
	"JP No. 2",
	"JP No. 3",
	"JP No. 4",
	"JP No. 5",
	"JP No. 6",
	"JP No. 7",
	"JP No. 8"
  ],
  "links": [
   "Case Records Search",
   "Class C Misdemeanors Only"
  ],
  "scripts": [
    {
	  "name": "is-human-page",
	  "json": [
		"let human_check_found = false;",
		"if (null != document.getElementById('captcha-container')) { human_check_found = true; }",
		"if (!human_check_found) {",
		"    let body = document.getElementsByTagName('body')[0];",
		"    let txt = body.innerText;",
		"    human_check_found = txt.indexOf('confirm you are human') > 0;",
		"}",
		"var rsp = {",
		"    hasCaptcha = human_check_found",
		"}",
		"return JSON.stringify(rsp);",
	  ]
	},
    {
	  "name": "civil-case-reader",
	  "json": [
		"/*",
		"Uri",
		"CaseNumber",
		"CaseStyle",
		"DateFiled",
		"Court",
		"CaseType",
		"*/",
		"let civil_case_reader = {",
		"	get_rows: function () {",
		"		let headers = Array.prototype.slice.call(document.getElementsByTagName('th'), 0);",
		"		let firstheader = headers.find(h => h.getAttribute('class') == 'ssSearchResultHeader' && h.innerText.trim() == 'Case Number');",
		"		if (null == firstheader) return null;",
		"		let headingrow = firstheader.parentElement;",
		"		while (null != headingrow && headingrow.tagName != 'TBODY') { headingrow = headingrow.parentElement; }",
		"		if (headingrow == null) return null;",
		"		let rows = Array.prototype.slice.call(headingrow.getElementsByTagName('tr'), 0);",
		"		rows = rows.filter(rw => { let cells = Array.prototype.slice.call(rw.getElementsByTagName('td'), 0); return cells.length > 4; });",
		"		return rows;",
		"	},",
		"	get_uri: function (cell) {",
		"		let links = cell.getElementsByTagName('a');",
		"		if (null == links || links.length == 0) return '';",
		"		let lnk = links[0].getAttribute('href').toString();",
		"		let origin = document.location.origin;",
		"		if (lnk.indexOf(origin) >= 0) return lnk;",
		"		let pg = document.location.href;",
		"		let qry = document.location.search;",
		"		if (qry.length > 0) {",
		"			pg = pg.substring(0, pg.length - qry.length);",
		"		}",
		"		let landing = document.location.pathname",
		"		if (landing.length > 0) {",
		"			let items = landing.split('/');",
		"			let lastitem = items[items.length - 1];",
		"			pg = pg.substring(0, pg.length - lastitem.length);",
		"		}",
		"		lnk = ''.concat(pg, lnk);",
		"		return lnk;",
		"	},",
		"	get_data: function (rw) {",
		"        try {",
		"            let cells = Array.prototype.slice.call(rw.getElementsByTagName('td'), 0);",
		"            let caseNo = String(cells[0].innerText);",
		"            let caseStyle = String(cells[2].innerText);",
		"            let dateFiled = String(cells[3].firstChild.innerText)",
		"            let court = String(cells[3].lastChild.innerText);",
		"            let caseType = String(cells[4].firstChild.innerText);",
		"            let uri = String(justice_case_reader.get_uri(cells[0]));",
		"            return {",
		"                'uri': uri,",
		"                'caseNumber': caseNo,",
		"                'caseStyle': caseStyle,",
		"                'caseType': caseType,",
		"                'court': court,",
		"                'dateFiled': dateFiled",
		"            }",
		"        } catch {",
		"			return null;",
		"        }",
		"	},",
		"	get_cases: function () {",
		"		let cases = [];",
		"		let rws = justice_case_reader.get_rows();",
		"		if (null == rws) return cases;",
		"		rws.forEach(rw => {",
		"			let dt = justice_case_reader.get_data(rw);",
		"			if (null != dt) cases.push(dt);",
		"		})",
		"		return cases;",
		"	}",
		"}",
		"let data = justice_case_reader.get_cases();",
		"return JSON.stringify(data);",
	  ]
	},
	{
		"name": "criminal-case-reader",
		"json":[
			"/*",
			"Uri",
			"CaseNumber",
			"CaseStyle",
			"DateFiled",
			"Court",
			"CaseType",
			"*/",
			"let criminal_case_reader = {",
			"	get_rows: function () {",
			"		let headers = Array.prototype.slice.call(document.getElementsByTagName('th'), 0);",
			"		let firstheader = headers.find(h => h.getAttribute('class') == 'ssSearchResultHeader' && h.innerText.trim() == 'Case Number');",
			"		if (null == firstheader) return null;",
			"		let headingrow = firstheader.parentElement;",
			"		while (null != headingrow && headingrow.tagName != 'TBODY') { headingrow = headingrow.parentElement; }",
			"		if (headingrow == null) return null;",
			"		let rows = Array.prototype.slice.call(headingrow.getElementsByTagName('tr'), 0);",
			"		rows = rows.filter(rw => { let cells = Array.prototype.slice.call(rw.getElementsByTagName('td'), 0); return cells.length > 4; });",
			"		return rows;",
			"	},",
			"	get_uri: function (cell) {",
			"		let links = cell.getElementsByTagName('a');",
			"		if (null == links || links.length == 0) return '';",
			"		let lnk = links[0].getAttribute('href').toString();",
			"		let origin = document.location.origin;",
			"		if (lnk.indexOf(origin) >= 0) return lnk;",
			"		let pg = document.location.href;",
			"		let qry = document.location.search;",
			"		if (qry.length > 0) {",
			"			pg = pg.substring(0, pg.length - qry.length);",
			"		}",
			"		let landing = document.location.pathname",
			"		if (landing.length > 0) {",
			"			let items = landing.split('/');",
			"			let lastitem = items[items.length - 1];",
			"			pg = pg.substring(0, pg.length - lastitem.length);",
			"		}",
			"		lnk = ''.concat(pg, lnk);",
			"		return lnk;",
			"	},",
			"	get_data: function (rw) {",
			"        try {",
			"            let cells = Array.prototype.slice.call(rw.getElementsByTagName('td'), 0);",
			"            let caseNo = String(cells[0].innerText);",
			"            let citationNbr = String(cells[1].innerText);",
			"            let chargeType = String(cells[5].innerText);",
			"            let caseStyle = String(cells[2].innerText);",
			"            let dateFiled = String(cells[3].firstChild.innerText)",
			"            let court = String(cells[3].lastChild.innerText);",
			"            let caseType = String(cells[4].firstChild.innerText);",
			"            let uri = String(criminal_case_reader.get_uri(cells[0]));",
			"            return {",
			"                'uri': uri,",
			"                'caseNumber': caseNo,",
			"                'caseStyle': caseStyle,",
			"                'caseType': caseType,",
			"                'court': court,",
			"                'dateFiled': dateFiled,",
			"                'charges': chargeType,",
			"                'citationNumber': citationNbr",
			"            }",
			"        } catch {",
			"			return null;",
			"        }",
			"	},",
			"	get_cases: function () {",
			"		let cases = [];",
			"		let rws = criminal_case_reader.get_rows();",
			"		if (null == rws) return cases;",
			"		rws.forEach(rw => {",
			"			let dt = criminal_case_reader.get_data(rw);",
			"			if (null != dt) { cases.push(dt); }",
			"		})",
			"		return cases;",
			"	}",
			"}",
			"let data = criminal_case_reader.get_cases();",
			"return JSON.stringify(data);",
		]
	},
	{
		"name": "set-search-context",
		"json":[
			"let search_type = '{0}'; // default to case records search",
			"let location_name = '{1}'",
			"const linkitems = [",
			"    'Case Records Search'.toLowerCase(),",
			"    'Class C Misdemeanors Only'.toLowerCase()",
			"]",
			"// Create a new 'change' event, set bubbles to true if you want the event to propagate up the DOM tree",
			"const change_event = new Event('change', { bubbles: true }); ",
			"let cbo = document.getElementById('sbxControlID2');",
			"let opts = Array.prototype.slice.call(cbo.getElementsByTagName('option'), 0);",
			"let links = Array.prototype.slice.call(document.getElementsByTagName('a'), 0);",
			"links = links.filter(n => { return n.classList.contains('ssSearchHyperlink') });",
			"links = links.filter(n => {",
			"    let txt = String(n.innerText).trim().toLowerCase();",
			"    for (let i of linkitems) {",
			"        if (linkitems[i] == txt) { return true; }",
			"    }",
			"    return false;",
			"});",
			"if (isNaN(search_type)) return;",
			"let searchId = parseInt(search_type);",
			"if (searchId < 0 || links.length > searchId) return;",
			"if (searchId == 1 && location_name.indexOf('JP') < 0) {",
			"    location_name = 'All JP Courts'",
			"}",
			"let optId = opts.findIndex(x => x.innerText == location_name);",
			"if (null == optId || optId < 0) { return; }",
			"let lnk = links.find(x => x.innerText.trim().toLowerCase() == linkitems[searchId]);",
			"if (lnk == null) return;",
			"cbo.selectedIndex = optId;",
			"cbo.dispatchEvent(change_event);",
			"lnk.click();",
		]
	}
  ]
}